Test date: 06/09/16  22:11:39 
The number of times you used the grading program is 13 
In the business world, your customer replaces the grading program. 
The goal is a correct program with the fewest grading attempts. 
Key Grading System Version 4.1
Student: Last=Siddharth            First=Singh                Type=Individual          
Grading and testing history log
       User Test.    Date: 06/09/16  18:14:42  keyboard     test         
       User Test.    Date: 06/09/16  18:14:49  keyboard     test         
       User Test.    Date: 06/09/16  18:14:58  keyboard     test         
   *** Grading Run.  Date: 06/09/16  18:15:39 
       User Test.    Date: 06/09/16  18:21:48  keyboard     test         
   *** Grading Run.  Date: 06/09/16  18:21:54 
       User Test.    Date: 06/09/16  19:13:08  keyboard     test         
       User Test.    Date: 06/09/16  19:13:12  keyboard     test         
   *** Grading Run.  Date: 06/09/16  19:13:17 
       User Test.    Date: 06/09/16  19:19:31  keyboard     test         
   *** Grading Run.  Date: 06/09/16  19:19:44 
       User Test.    Date: 06/09/16  19:53:40  keyboard     test         
       User Test.    Date: 06/09/16  19:53:46  keyboard     test         
       User Test.    Date: 06/09/16  19:54:05  keyboard     test         
       User Test.    Date: 06/09/16  19:54:45  keyboard     test         
       User Test.    Date: 06/09/16  20:03:29  keyboard     test         
   *** Grading Run.  Date: 06/09/16  20:03:40 
       User Test.    Date: 06/09/16  21:00:37  keyboard     test         
       User Test.    Date: 06/09/16  21:00:44  keyboard     test         
   *** Grading Run.  Date: 06/09/16  21:00:50 
       User Test.    Date: 06/09/16  21:05:42  keyboard     test         
       User Test.    Date: 06/09/16  21:05:48  keyboard     test         
   *** Grading Run.  Date: 06/09/16  21:05:52 
       User Test.    Date: 06/09/16  21:28:12  keyboard     test         
   *** Grading Run.  Date: 06/09/16  21:28:22 
       User Test.    Date: 06/09/16  21:37:59  keyboard     test         
       User Test.    Date: 06/09/16  21:38:03  keyboard     test         
   *** Grading Run.  Date: 06/09/16  21:38:06 
       User Test.    Date: 06/09/16  21:42:05  keyboard     test         
       User Test.    Date: 06/09/16  21:42:12  keyboard     test         
   *** Grading Run.  Date: 06/09/16  21:42:19 
       User Test.    Date: 06/09/16  22:04:39  keyboard     test         
       User Test.    Date: 06/09/16  22:04:49  keyboard     test         
   *** Grading Run.  Date: 06/09/16  22:04:54 
       User Test.    Date: 06/09/16  22:06:18  keyboard     test         
       User Test.    Date: 06/09/16  22:09:02  keyboard     test         
       User Test.    Date: 06/09/16  22:09:06  keyboard     test         
   *** Grading Run.  Date: 06/09/16  22:09:15 
       User Test.    Date: 06/09/16  22:10:57  keyboard     test         
       User Test.    Date: 06/09/16  22:11:29  keyboard     test         
   *** Grading Run.  Date: 06/09/16  22:11:39 
Running test
Test ran correctly.
++ Grade ++   60 = Points earned for correct answers.

-> A major reason for programming in assembler is to maximize efficiency.
This can be instructions written and/or instructions executed.
Please read the section in the class notes titled Code Complexity.

We are now analyzing your source code. You will be graded on
the number of instructions you wrote to solve this problem.
The target for the number of executable instructions written is:
20 points for   0 -  20  
15 points for  21 -  22  
10 points for  23 -  24 
05 points for  25 -  26 
00 points for  27+      
Your actual counts are:
Lines .......  73    Comments ...  44    Labels .......   4   
Directives ..   5    Variables ..   0    Executables ..  20    McCabe ..   7 
++ Grade ++   20 = Points earned for code written efficiency.  

The McCabe number for your KEY.ASM is 7 which is considered 
fine for the KEY assignment and indicates reasonable program structure.

-> Analyzing program documentation. 
The heuristic algorithms used may have problems with your specific code. 
Contact the instructor if you detect a problem with your grade. 
DOCPH-0022 The program header format is adequate. 
DOCHB-0.65 Use of code block headers is adequate. 
DOCLC-1.00 Use of line comments is adequate. 
++ Grade ++   20 = Points earned for correct documentation.    

-> Calculating the total grade for the program.                  
This grade is subject to adjustment by the instructor.           
This grade will be reduced by any late submission penalty.       
++ Grade ++  100 = Total grade generated by the Grading System.  

-> Statistics on testing and grading                             
    28  = Number of user tests.                                  
    13  = Number of grading runs to get the program working.     
     0  = Number of grading runs to improve efficiency or documentation. 

+- atyC<6&}xC86&k~C6&juiC86&zuzC766&Zkyz&jgzk@&6<56?57<&&88@77@9?&

Building the file key.ans for electronic submission...
;--------------------------------------------------------------------
;
;   KEY ***** MASM VERSION *****
;
;
;  The assembly code below reads one character from stdin at a time
;	and does following:
;		If character is an uppercase alphabet or a space then displays it on stdout.
;		If character is an lowercase alphabet,converts it to uppercase and displays on stdout.
;		If character is dot then displays it and terminates the program.
;		All other characters are ignored.
;
;   The program terminates when a period is read.
;
;   To use, type this command:  KEY
;
;   Owner: Siddharth Singh
;
;   Date			Reason
;   ----			------
;   06/09/2016		Original version
;---------------------------------------

.model small			; 64k data and 64k code
.8086                   ; only allow 8086 instructions
.stack 256              ; stack size is 256 bytes

;---------------------------------------
; No data segment.
; Starts with while loop and while loop ends
; when dot character is entered.
;---------------------------------------
		.code	
;---------------------------------------
; while(c != '.')
;---------------------------------------			
whileLoop:				; While loop
	mov	ah,8			; read without echo a character
	int	21h				; how: set ah=8 and issue int 21h
	cmp al,'.'			; checks if charater entered is .(dot)
	je print			; print .
	cmp al,' '			; checks if charater entered is a space character
	je print			; print space
	cmp al,'Z'			; tranlates character to a range less than 'Z'  
	jle folded			; Do not translate if already in the range
	sub al,20h			; otherwise translate
;---------------------------------------
; The execution enters the following region when
; character in al is translated to a less than 'Z' range
;---------------------------------------
folded:					; post translation
	cmp al,'A'			; checks if less than 'A'
	jl whileLoop		; continue while loop if less than A
	cmp al,'Z'			; check if greater than Z
	jg whileLoop		; continue while loop if greater than 'Z'
;---------------------------------------
; Displays character in al to stdout and loops back
;---------------------------------------
print:					; otherwise display to stdout
	mov	dl,al			; write out a blank
    mov	ah,2			; set up to write the character
    int	21h				; how: set ah=2 and issue int 21h
    cmp al,'.'          ; was the character a dot
	jne	whileLoop		; loop back
;---------------------------------------
; The user typed a period so terminate.
;---------------------------------------
exit:					; terminate 
    mov	ax,4c00h        ; set correct exit code in ax
    int	21h             ; int 21h will terminate program
    end	whileLoop		; execution begins at the label start

			